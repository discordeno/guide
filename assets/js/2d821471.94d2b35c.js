"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3784],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=l(a),d=r,g=h["".concat(c,".").concat(d)]||h[d]||p[d]||o;return a?n.createElement(g,s(s({ref:t},u),{},{components:a})):n.createElement(g,s({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2517:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return h}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),s=["components"],i={sidebar_position:4,sidebar_label:"Step 3 - Cache"},c="Step 3: Standalone Cache Process",l={unversionedId:"big-bot-guide/cache",id:"big-bot-guide/cache",title:"Step 3: Standalone Cache Process",description:"The next part of this is going to be about making a standalone cache process. By now, you should have both a REST and a",source:"@site/docs/big-bot-guide/cache.md",sourceDirName:"big-bot-guide",slug:"/big-bot-guide/cache",permalink:"/docs/big-bot-guide/cache",editUrl:"https://github.com/discordeno/discordeno/tree/main/site/docs/big-bot-guide/cache.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Step 3 - Cache"},sidebar:"tutorialSidebar",previous:{title:"Step 2 - Gateway",permalink:"/docs/big-bot-guide/gateway"},next:{title:"Step 4 - Event Handler",permalink:"/docs/big-bot-guide/events"}},u=[{value:"Why Use Standalone Cache Process?",id:"why-use-standalone-cache-process",children:[],level:2},{value:"Understand Cache Types",id:"understand-cache-types",children:[],level:2},{value:"Setting Up The Cache",id:"setting-up-the-cache",children:[{value:"Cache Handler",id:"cache-handler",children:[],level:3}],level:2}],p={toc:u};function h(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"step-3-standalone-cache-process"},"Step 3: Standalone Cache Process"),(0,o.kt)("p",null,"The next part of this is going to be about making a standalone cache process. By now, you should have both a REST and a\nGateway process ready. Before, we start handling events we should build a Cache handler."),(0,o.kt)("h2",{id:"why-use-standalone-cache-process"},"Why Use Standalone Cache Process?"),(0,o.kt)("p",null,"A standalone cache process allows you to retain cached data even after bot restarts. For example, if you are caching\nmember roles to track when a role was added or removed, you may want to cache the members. The question then comes to\nplay, when deciding where to keep your cache. Another reason to use this is, whether or not you are using a standalone\ngateway process."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Start rest process"),(0,o.kt)("li",{parentName:"ul"},"Start event handler process(bot)"),(0,o.kt)("li",{parentName:"ul"},"Start gateway process.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Guild create events arrive providing all the data needed to cache in the bot process."))),(0,o.kt)("li",{parentName:"ul"},"Restart event handler process(maybe for an update/reboot)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"You lost all guilds/channels/permissions etc and can not get them again without restarting gateway. This defeats the\nentire point of the standalone gateway.")))),(0,o.kt)("p",null,"If your cache is tied to the bot processes which is not tied to the gateway you lose all this info. The next thought is\nto just keep the Cache entirely in the gateway process however, I do not like this personally however, should you desire\nthis you can do this as well. The reason I prefer not to do this is when your bot needs to make requests to your cache,\nyou do not want it occupying the thread for processing other gateway events arriving from discord. A separate cache\nprocess makes it so it uses an entirely separate thread and will not slow down anything else."),(0,o.kt)("h2",{id:"understand-cache-types"},"Understand Cache Types"),(0,o.kt)("p",null,'When I use the term cache process, this is interchangeable with any similar term such as "custom cache", "redis cache",\n"pgsql cache", etc... The fact is you can keep this "cache" anywhere. For this guide, we will implement a very simple\ncache using pgsql. Feel free to modify this any way you like as advanced as you like. The point is Discordeno cache is\nflexible enough to let you use anything for your Cache storage.'),(0,o.kt)("h2",{id:"setting-up-the-cache"},"Setting Up The Cache"),(0,o.kt)("p",null,"This step is for you to create the base schema for your cache. For example, if you want to implement a pgsql or redis\ncache perhaps you want to prepare the tables/schema. For this guide, we are just going to do a quick little hack to get\na custom cache working."),(0,o.kt)("p",null,"Create a file in a path like ",(0,o.kt)("inlineCode",{parentName:"p"},"src/bot/cache/schema.sql")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE TABLE IF NOT EXISTS "users" (\n    id bigint NOT NULL,\n    username text COLLATE pg_catalog."default" NOT NULL,\n    discriminator text COLLATE pg_catalog."default" NOT NULL,\n    bot boolean,\n    CONSTRAINT "users_pkey" PRIMARY KEY (id)\n)\n')),(0,o.kt)("p",null,"Now that we have this schema ready for our users cache. Go ahead and repeat this for all other cache tables."),(0,o.kt)("p",null,"Cache Tables:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"users"),(0,o.kt)("li",{parentName:"ul"},"members"),(0,o.kt)("li",{parentName:"ul"},"guilds"),(0,o.kt)("li",{parentName:"ul"},"channels"),(0,o.kt)("li",{parentName:"ul"},"threads"),(0,o.kt)("li",{parentName:"ul"},"messages"),(0,o.kt)("li",{parentName:"ul"},"presences"),(0,o.kt)("li",{parentName:"ul"},"unavailableGuilds")),(0,o.kt)("p",null,"Once you are finished continue forward, for the purpose of keeping this guide short we wont cover each table."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You should also run this file to prepare your pgsql and have your pgsql database running by now. Or whatever, cache\nservice you use.")),(0,o.kt)("h3",{id:"cache-handler"},"Cache Handler"),(0,o.kt)("p",null,"Now we will initiate our cache service. This may be different for you based on your choice of cache type. Since we are\nusing PGSQL for our cache layer, we will now instantiate it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { postgres } from "../../../deps.ts";\n\n// YOU CUSTOM PGSQL INFO GOES HERE\nconst DATABASE_USERNAME = "";\nconst DATABASE_PASSWORD = "";\nconst DATABASE_NAME = "";\nconst DATABASE_HOST = "";\nconst DATABASE_PORT = 8956;\nconst DATABASE_MAX = 20;\n\nexport const psql = postgres({\n  username: DATABASE_USERNAME,\n  password: DATABASE_PASSWORD,\n  database: DATABASE_NAME,\n  host: DATABASE_HOST,\n  port: DATABASE_PORT,\n  max: DATABASE_MAX,\n  /*onnotice: (data) => {\n      logger.psql(`${data.severity} ${bgBrightBlack(`[${data.code}| ${data.file}:${data.line}]`)}`, data.message);\n    },*/\n  types: {\n    bigint: postgres.BigInt,\n  },\n});\n')),(0,o.kt)("p",null,"To use the PGSQL driver we are using in this guide you can insert this into your ",(0,o.kt)("inlineCode",{parentName:"p"},"deps.ts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// @deno-types="https://denopkg.com/porsager/postgres@e2a8595d7aa8c3c838b83b9bca7b890c1707ad2c/types/index.d.ts"\nexport { default as postgres } from "https://denopkg.com/porsager/postgres@e2a8595d7aa8c3c838b83b9bca7b890c1707ad2c/deno/lib/index.js";\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: Remember you can use any driver you like. For deno users we prefer to use this library for PGSQL because it is\nmore stable and more performant.")),(0,o.kt)("p",null,"Now that the cache layer is ready, we can proceed to begin creating our bot."))}h.isMDXComponent=!0}}]);